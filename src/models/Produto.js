const { Model, DataTypes } = require("sequelize");

class Produto extends Model {
  static init(sequelize) {
    super.init(
      {
        produto_id: {
          primaryKey: true,
          type: DataTypes.INTEGER,
          autoIncrement: true,
          allowNull: false,
        },
        codigo_produto: { type: DataTypes.STRING(16), require: true, unique: true },
        descricao: { type: DataTypes.STRING(50), require: true, unique: true },
        codigo_usuario: DataTypes.STRING(14),
        grupo_produto_id: DataTypes.INTEGER,
        fabricante_id: DataTypes.INTEGER,
        tributos_id: DataTypes.INTEGER,
        unidade_medida_id: DataTypes.INTEGER,
        subgrupoprodutoid: DataTypes.INTEGER,
        sub_grupo_id: DataTypes.INTEGER,
        imobilizado: { type: DataTypes.CHAR(1), require: true },
        reducao_icms: DataTypes.NUMERIC(9),
        limite_desconto: DataTypes.NUMERIC(9),
        aliquota_icms: DataTypes.NUMERIC(9),
        aliquota_ipi: DataTypes.NUMERIC(9),
        estoque_atual: DataTypes.NUMERIC(15),
        estoque_minumo: { type: DataTypes.NUMERIC(15), require: true },
        estoque_maximo: DataTypes.NUMERIC(15),
        preco_custo: DataTypes.NUMERIC(15),
        preco_venda: DataTypes.NUMERIC(15),
        preco_brasindice: DataTypes.NUMERIC(15),
        perc_aumento: DataTypes.NUMERIC(9),
        data_ult_compra: DataTypes.DATE,
        valor_ult_compra: DataTypes.NUMERIC(15),
        data_ult_venda: DataTypes.DATE,
        valor_ult_venda: DataTypes.NUMERIC(15),
        validade: DataTypes.NUMERIC(15),
        fator: DataTypes.DOUBLE,
        peso_liquido: DataTypes.DOUBLE,
        peso_bruto: DataTypes.DOUBLE,
        caracteristica: DataTypes.STRING(35),
        icms_ult_compra: DataTypes.NUMERIC(15),
        data_primeira_venda: DataTypes.DATE,
        aliquota_pis_cofins: DataTypes.NUMERIC(9),
        ativo: { type: DataTypes.CHAR(1), require: true },
        outros_valores: { type: DataTypes.NUMERIC(15), require: true },
        valor_unitario: { type: DataTypes.NUMERIC(15), require: true },
        preco_custo_venda: { type: DataTypes.NUMERIC(15), require: true },
        indice_agregado: DataTypes.NUMERIC(9),
        aliquota_cofins: DataTypes.DOUBLE,
        limite_acrescimo: DataTypes.DOUBLE,
        nomeclatura_mercosul: DataTypes.STRING(8),
        base_icms_subs_ult_compra: { type: DataTypes.NUMERIC(15), require: true },
        vlr_icms_subs_ult_compra: { type: DataTypes.NUMERIC(15), require: true },
        giromedio: DataTypes.DOUBLE,
        piscofins: DataTypes.CHAR(1),
        dataultimaalteracao: DataTypes.DATE,
        localimagemproduto: DataTypes.STRING,
        observacoes: DataTypes.BLOB,
        peso: DataTypes.STRING(10),
        medida: DataTypes.STRING(20),
        amperagem: DataTypes.STRING(20),
        norma: DataTypes.STRING(20),
        tipocorrente: DataTypes.STRING(50),
        modelo: DataTypes.STRING(20),
        numero_frabricacao: DataTypes.STRING(20),
        data_fabricacao: DataTypes.STRING(20),
        alimentacao: DataTypes.STRING(20),
        corrente_sem_carga: DataTypes.STRING(20),
        corrente_com_carga: DataTypes.STRING(20),
        dc_abertura: DataTypes.STRING(20),
        tensao_arco: DataTypes.STRING(20),
        corrente_saida: DataTypes.STRING(20),
        ciclo_trabalho: DataTypes.STRING(20),
        precovendaanterior: DataTypes.NUMERIC(15),
        genero_id: DataTypes.INTEGER,
        produtotipoitem_id: DataTypes.INTEGER,
        cst_pis: DataTypes.STRING(3),
        cst_cofins: DataTypes.STRING(3),
        estoque_reserva: DataTypes.DOUBLE,
        cst_pis_saida: DataTypes.STRING(3),
        cst_cofins_saida: DataTypes.STRING(3),
        aliquota_pis_cofins_saida: DataTypes.DOUBLE,
        aliquota_cofins_saida: DataTypes.DOUBLE,
        cst_ipi: DataTypes.STRING(2),
        piscofinstab437_id: DataTypes.INTEGER,
        natureza_operacao: DataTypes.INTEGER,
        inicio_promocao: DataTypes.DATE,
        fim_promocao: DataTypes.DATE,
        dataultimaatualizacaopreco: DataTypes.DATE,
        ippt: DataTypes.STRING(1),
        produto_entrega: DataTypes.STRING(1),
        markup: DataTypes.DOUBLE,
        vendedor_altera_preco: DataTypes.STRING(1),
        numero_ultima_nota: DataTypes.INTEGER,
        data_inclusao: DataTypes.DATE,
        margem_lucro: DataTypes.DOUBLE,
        markup_margem: DataTypes.STRING(1),
        aliquota_st: DataTypes.DOUBLE,
        preco_custo_anterioir: DataTypes.NUMERIC(15),
        outras_observacoes: DataTypes.STRING(100),
        taxa_embalagem: DataTypes.DOUBLE,
        diferenca_icm_sn: DataTypes.STRING(1),
        taxa_embalagem_sn: DataTypes.STRING(1),
        frete_sn: DataTypes.STRING(1),
        diferenca_icm_soma_sub: DataTypes.STRING(1),
        taxa_embalagem_soma_sub: DataTypes.STRING(1),
        taxa_embalagem_p_v: DataTypes.STRING(1),
        frete_item_p_v: DataTypes.STRING(1),
        frete_soma_sub: DataTypes.STRING(1),
        frete_item: DataTypes.NUMERIC(15),
        diferenca_icm: DataTypes.NUMERIC(15),
        dataultimaatualizacaoprecocusto: DataTypes.DATE,
        nota_fiscal_id: DataTypes.INTEGER,
        qtd_ultima_compra: DataTypes.DOUBLE,
        data_de_validade: DataTypes.DATE,
        codncm: DataTypes.STRING(10),
        cest: DataTypes.STRING(10),
        origem: { type: DataTypes.STRING(1), require: true },
        referencia: DataTypes.STRING(50),
        fator_transferencia: { type: DataTypes.NUMERIC(15), require: true },
        tabelaservico_id: DataTypes.STRING(14),
        tabelaatividade_id: DataTypes.INTEGER,
        qtdacionaprecopromocao: DataTypes.INTEGER,
        producaopropria: { type: DataTypes.CHAR(1), require: true },
        valorcustoproducao: DataTypes.NUMERIC(15),
        postospremia: DataTypes.NUMERIC(15),
        resgatepremia: DataTypes.NUMERIC(15),
        codorigem: { type: DataTypes.INTEGER, require: true },
        precopromopor_periodo_qtd: DataTypes.STRING(1),
        produtocomvariacoes: { type: DataTypes.CHAR(1), require: true },
      },
      {
        tableName: "produto",
        sequelize,
      }
    );
  }
  static associate(models) {
    this.belongsTo(models.Genero, { foreignKey: "genero_id", as: "genero" });
    this.belongsTo(models.Fabricante, {
      foreignKey: "fabricante_id",
      as: "fabricante",
    });
    this.belongsTo(models.GrupoProduto, {
      foreignKey: "grupo_produto_id",
      as: "grupoproduto",
    });
    this.belongsTo(models.ProdutoTipoItem, {
      foreignKey: "produtotipoitem_id",
      as: "produtotipoitem",
    });
    this.belongsTo(models.SubGrupoProduto, {
      foreignKey: "subgrupoprodutoid",
      as: "subgrupoproduto",
    });
    this.belongsTo(models.Tributo, {
      foreignKey: "tributos_id",
      as: "tributo",
    });
    this.belongsTo(models.UnidadeMedida, {
      foreignKey: "unidade_medida_id",
      as: "unidademedida",
    });
  }
}

module.exports = Produto;
